import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
// import { RootState, AppThunk } from '../../app/store';
import { RootState } from '../../app/store';
// import { fetchCount } from './counterAPI';
import axios from 'axios';
import {
    AUTH_STATE,
    CRED,
    LOGIN_USER,
    POST_PROFILE,
    PROFILE,
    JWT,
    USER,
} from "../types";
// const initialState: CounterState = {
//   value: 0,
//   status: 'idle',
// };

const initialState: AUTH_STATE = {
    isLoginView: true,
    loginUser: {
      id: 0,
      username: "",
    },
    profiles: [{ id: 0, user_profile: 0, img: null }],
  };
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

// export const counterSlice = createSlice({
//   name: 'counter',
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: {
//     increment: (state) => {
//       // Redux Toolkit allows us to write "mutating" logic in reducers. It
//       // doesn't actually mutate the state because it uses the Immer library,
//       // which detects changes to a "draft state" and produces a brand new
//       // immutable state based off those changes
//       state.value += 1;
//     },
//     decrement: (state) => {
//       state.value -= 1;
//     },
//     // Use the PayloadAction type to declare the contents of `action.payload`
//     incrementByAmount: (state, action: PayloadAction<number>) => {
//       state.value += action.payload;
//     },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       })
//       .addCase(incrementAsync.rejected, (state) => {
//         state.status = 'failed';
//       });
//   },
// });

export const fetchAsyncLogin = createAsyncThunk(
    "auth/login",
    async (auth: CRED) => {
    const res = await axios.post<JWT>(
        `${process.env.REACT_APP_API_URL}/authen/jwt/create`,
        auth,
        {
        headers: {
            "Content-Type": "application/json",
        },
        }
    );
    return res.data;
    }
);

export const fetchAsyncRegister = createAsyncThunk(
    "auth/register", 
    async (auth: CRED) => {
    const res = await axios.post<USER>(
        `${process.env.REACT_APP_API_URL}/api/create/`,
        auth,
        {
        headers: {
            "Content-Type": "application/json",
        },
        }
    );
    return res.data;
    }
);

export const fetchAsyncGetMyProf = createAsyncThunk(
    "auth/loginuser",
    async () => {
    const res = await axios.get<LOGIN_USER>(
        `${process.env.REACT_APP_API_URL}/api/loginuser/`,
        {
        headers: {
            Authorization: `JWT ${localStorage.localJWT}`,
        },
        }
    );
    return res.data;
    }
);

export const fetchAsyncCreateProf = createAsyncThunk(
    "auth/createProfile",
    async () => {
    const res = await axios.post<PROFILE>(
        `${process.env.REACT_APP_API_URL}/api/profile/`,
        { img: null },
        {
        headers: {
            "Content-Type": "application/json",
            Authorization: `JWT ${localStorage.localJWT}`,
        },
        }
    );
    return res.data;
    }
);

export const fetchAsyncGetProfs = createAsyncThunk(
    "auth/getProfiles",
    async () => {
    const res = await axios.get<PROFILE[]>(
        `${process.env.REACT_APP_API_URL}/api/profile/`,
        {
        headers: {
            Authorization: `JWT ${localStorage.localJWT}`,
        },
        }
    );
    return res.data;
    }
);

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    reducers: {},
  });
  






// export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export const {} = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default authSlice.reducer;
